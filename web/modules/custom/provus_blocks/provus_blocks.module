<?php

/**
 * @file
 * Contains provus_blocks.module.
 */

use Drupal\block\Entity\Block;
use Drupal\Component\Utility\Html;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function provus_blocks_help($route_name, RouteMatchInterface $route_match) {
  $x = [
    '```php' => '<code>',
    '```'    => '</code>',
    "\n"     => "\n<br />",
  ];
  switch ($route_name) {
    case 'help.page.provus_blocks':
      $txt = file_get_contents(drupal_get_path('module', 'provus_blocks') . '/README.md');
      return str_replace(array_keys($x), array_values($x), Html::escape($txt));
  }
  return '';
}

/**
 * Implements hook_preprocess_field().
 */
function provus_blocks_preprocess_field(&$vars) {
  // Make sure the referenced blocks run through theme later.
  if ($vars['entity_type'] == 'block_content' && ($vars['field_name'] == 'field_tab_items' || $vars['field_name'] == 'field_block_items')) {
    foreach ($vars['items'] as $key => $item) {
      if (!empty($item['content']['#block_content'])) {
        $vars['items'][$key]['block_uuid'] = 'block_content:' . $item['content']['#block_content']->uuid();
        $vars['items'][$key]['block_title'] = $item['content']['#block_content']->label();
      }
    }
  }
  // Add button classes to field link fields.
  if ($vars['field_name'] == 'field_link') {
    foreach ($vars['items'] as $key => $item) {
      if (!empty($item['content']['#url'])) {
        $vars['items'][$key]['content']['#options'] = ['attributes' => ['class' => 'button button--secondary']];
      }
    }
  }
  // Accordion items.
  if ($vars['field_name'] == 'field_accordion_items') {
    $vars['id'] = rand(10000, 100000);
    foreach ($vars['items'] as $key => $item) {
      if (!empty($item['content']['#block_content'])) {
        $vars['items'][$key]['item_heading'] = $item['content']['#block_content']->get('field_heading')->view('default');
        $vars['items'][$key]['item_body'] = $item['content']['#block_content']->get('field_body')->view('default');
      }
    }
  }
  // Carousel items Photo gallery.
  if ($vars['field_name'] == 'field_gallery_photos') {
    foreach ($vars['items'] as $key => $item) {
      if (isset($item['content']['#media'])) {
        $fid = $item['content']['#media']->getSource()->getSourceFieldValue($item['content']['#media']);
        $file = File::load($fid);
        if ($file instanceof File) {
          $url_full = $file->createFileUrl();
          $style = ImageStyle::load('thumbnail');
          $url_thumbnail = $style->buildUrl($file->getFileUri());
          $vars['items'][$key]['image_thumb_src'] = $url_thumbnail;
          $vars['items'][$key]['image_src'] = $url_full;
          $vars['items'][$key]['image_alt'] = $item['content']['#media']->get('field_media_image')->first()->get('alt')->getString();
        }
      }
    }
  }
  // Add field name to class.
  $vars['attributes']['class'][] = Html::cleanCssIdentifier($vars['field_name']);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function provus_blocks_theme_suggestions_block_alter(&$suggestions, $vars) {
  if (!empty($vars['elements']['content']['#block_content'])) {
    $block = $vars['elements']['content']['#block_content'];
    $block_type = $block->bundle();
    $base_suggestion = 'block__' . $block_type;
    $suggestions[] = $base_suggestion;
    if (!empty($vars['elements']['content']['#view_mode'])) {
      $suggestions[] = $base_suggestion . '__' . $vars['elements']['content']['#view_mode'];
    }
    switch ($block_type) {
      case 'link_group':
        // Get group display.
        $group_display = $block->get('field_group_display')->getValue()[0]['value'];
        $display_type = explode('_', $group_display);
        $suggestions[] = $base_suggestion . '__' . $group_display;
        $suggestions[] = $base_suggestion . '__' . $display_type[0];
        break;

      default:
        break;
    }

  }
  return $suggestions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function provus_blocks_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Alter link group form on blocks editing page.
  $form_ids_blockcontent = [
    'block_content_link_group_edit_form',
    'block_content_link_group_form',
  ];
  if (in_array($form_id, $form_ids_blockcontent)) {
    $form = provus_blocks_alter_block($form);
  }

  // Alter tabs form on blocks editing page.
  $form_ids_tabs = [
    'block_content_tabs_edit_form',
    'block_content_tabs_edit_form',
  ];
  if (in_array($form_id, $form_ids_tabs)) {
    $form = provus_blocks_process_tabs($form);
  }

  // Alter link group and tabs on layout builder forms.
  $form_ids_layoutbuilder = [
    'layout_builder_update_block',
    'layout_builder_add_block',
  ];
  if (in_array($form_id, $form_ids_layoutbuilder)) {
    $form['settings']['block_form']['#process'][] = 'provus_blocks_process_layoutbuilder_block';
  }
}

/**
 * Process callback for custom block form.
 */
function provus_blocks_process_layoutbuilder_block(array $element, FormStateInterface $form_state) {
  if ((isset($element['#block']) && $element['#block']->bundle() == 'link_group') ||
    (isset($element['#bundle']) && $element['#bundle'] == 'link_group')) {
    $parents = !empty($element['#parents']) ? $element['#parents'] : [];
    $element = provus_blocks_alter_block($element, $parents);
  }
  if (isset($element['#block']) && $element['#block']->bundle() == 'tabs') {
    $element = provus_blocks_process_tabs($element);
  }
  return $element;
}

/**
 * Process callback for custom block form.
 */
function provus_blocks_process_tabs(array $form) {
  if (!empty($form['field_tab_items']['widget']['entities'][0])) {
    foreach ($form['field_tab_items']['widget']['entities'] as $delta => $subform) {
      if (is_numeric($delta) && !empty($form['field_tab_items']['widget']['entities'][$delta]['form']['inline_entity_form'])) {
        $form['field_tab_items']['widget']['entities'][$delta]['form']['inline_entity_form']['#process'][] = 'provus_blocks_process_layoutbuilder_block';
      }
    }
  }
  if (!empty($form['field_tab_items']['widget']['form']['inline_entity_form'])) {
    $form['field_tab_items']['widget']['form']['inline_entity_form']['#process'][] = 'provus_blocks_process_layoutbuilder_block';
  }
  return $form;
}

/**
 * Alter callback for custom block form.
 */
function provus_blocks_alter_block($element, $parents = []) {
  if (empty($parents)) {
    $group_source_name = 'field_group_source';
    $group_display_name = 'field_group_display';
    $content_type_name = 'field_content_type';
    $pager_name = 'field_automatic_pager[value]';
  }
  else {
    $parent_path = '';
    foreach ($parents as $path) {
      $parent_path .= (empty($parent_path)) ? $path : '[' . $path . ']';
    }
    $group_source_name = $parent_path . '[field_group_source]';
    $group_display_name = $parent_path . '[field_group_display]';
    $content_type_name = $parent_path . '[field_content_type]';
    $pager_name = $parent_path . '[field_automatic_pager][value]';
  }
  $element['field_content_type']['#states'] = [
    'visible' => [
      'select[name="' . $group_source_name . '"]' => ['value' => 'auto'],
    ],
  ];
  $element['field_count']['#states'] = [
    'visible' => [
      'select[name="' . $group_source_name . '"]' => ['value' => 'auto'],
    ],
  ];
  $element['field_automatic_sort']['#states'] = [
    'visible' => [
      'select[name="' . $group_source_name . '"]' => ['value' => 'auto'],
    ],
  ];
  $element['field_automatic_offset']['#states'] = [
    'visible' => [
      'select[name="' . $group_source_name . '"]' => ['value' => 'auto'],
    ],
  ];
  $element['field_automatic_pager']['#states'] = [
    'visible' => [
      'select[name="' . $group_source_name . '"]' => ['value' => 'auto'],
      ':input[name="' . $group_display_name . '"]' => [
        ['value' => "column"],
        ['value' => "grid_1"],
        ['value' => "grid_2"],
        ['value' => "grid_3"],
        ['value' => "grid_4"],
      ],
    ],
  ];
  $element['field_content_references']['#states'] = [
    'visible' => [
      'select[name="' . $group_source_name . '"]' => ['value' => 'manual_content'],
    ],
  ];
  $element['field_block_items']['#states'] = [
    'visible' => [
      'select[name="' . $group_source_name . '"]' => ['value' => 'manual_inline'],
    ],
  ];
  $element['field_automatic_article_type']['#states'] = [
    'visible' => [
      'select[name="' . $content_type_name . '"]' => ['value' => 'provus_article'],
      'select[name="' . $group_source_name . '"]' => ['value' => 'auto'],
    ],
  ];
  $element['field_automatic_person_type']['#states'] = [
    'visible' => [
      'select[name="' . $content_type_name . '"]' => ['value' => 'person'],
      'select[name="' . $group_source_name . '"]' => ['value' => 'auto'],
    ],
  ];
  $element['field_automatic_location_type']['#states'] = [
    'visible' => [
      'select[name="' . $content_type_name . '"]' => ['value' => 'location'],
      'select[name="' . $group_source_name . '"]' => ['value' => 'auto'],
    ],
  ];
  $element['field_automatic_event_type']['#states'] = [
    'visible' => [
      'select[name="' . $content_type_name . '"]' => ['value' => 'event'],
      'select[name="' . $group_source_name . '"]' => ['value' => 'auto'],
    ],
  ];
  $element['field_automatic_number_per_page']['#states'] = [
    'visible' => [
      'input[name="' . $pager_name . '"]' => ['checked' => TRUE],
      'select[name="' . $group_source_name . '"]' => ['value' => 'auto'],
      ':input[name="' . $group_display_name . '"]' => [
        ['value' => "column"],
        ['value' => "grid_1"],
        ['value' => "grid_2"],
        ['value' => "grid_3"],
        ['value' => "grid_4"],
      ],
    ],
  ];
  $element['field_item_display']['#states'] = [
    'visible' => [
      ':input[name="' . $group_display_name . '"]' => [
        ['value' => "column"],
        ['value' => "grid_1"],
        ['value' => "grid_2"],
        ['value' => "grid_3"],
        ['value' => "grid_4"],
      ],
    ],
  ];

  return $element;
}

/**
 * Implements hook_block_access().
 *
 * Hide the page title for some node types while still showing it
 * on all other node types, and non-node pages.
 */
function provus_blocks_block_access(Block $block, $operation, AccountInterface $account) {
  $disallowedTypes = [
    'event',
    'location',
  ];
  if ($operation === 'view' && $block->getPluginId() == 'page_title_block') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof NodeInterface) {
      if (in_array($node->bundle(), $disallowedTypes)) {
        return AccessResult::forbidden();
      }
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_theme().
 */
function provus_blocks_theme($existing, $type, $theme, $path) {
  return [
    'provus_blocks_social_links' => [
      'template' => 'provus-blocks--social-links',
      'variables' => [
        'data' => [],
      ],
    ],
  ];
}
