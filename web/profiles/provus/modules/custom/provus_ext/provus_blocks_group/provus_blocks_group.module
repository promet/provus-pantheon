<?php

/**
 * @file
 * Contains provus_blocks.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function provus_blocks_group_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the provus_blocks_group module.
    case 'help.page.provus_blocks_group':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Let users create a provus block: group.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function provus_blocks_group_theme_suggestions_block_alter(&$suggestions, $vars) {
  if (!empty($vars['elements']['content']['#block_content'])) {
    $block = $vars['elements']['content']['#block_content'];
    $block_type = $block->bundle();
    $base_suggestion = 'block__' . $block_type;
    if ($block_type == 'provus_group') {
      // Get group display.
      $group_display = $block->get('field_provus_group_display')->value;
      $display_type = explode('_', $group_display);
      $suggestions[] = $base_suggestion . '__' . $group_display;
      $suggestions[] = $base_suggestion . '__' . $display_type[0];
    }
  }
  return $suggestions;
}

/**
 * Implements hook_theme().
 */
function provus_blocks_group_theme() {
  return [
    'block__provus_group' => [
      'template' => 'block--provus-group',
      'base hook' => 'block'
    ],
  ];
}

/**
 * Implements hook_preprocess_block().
 */
function provus_blocks_group_preprocess_block(&$vars) {
  // Preprocess custom blocks.
  if (!empty($vars['elements']['content']['#block_content'])) {
    $block = $vars['elements']['content']['#block_content'];
    $block_type = $block->bundle();

    if ($block_type == 'provus_group') {
      // Get group display.
      $group_display = $block->get('field_provus_group_display')->value;
      $display_type = explode('_', $group_display);
      $vars['group_number'] = !empty($display_type[1]) ? $display_type[1] : NULL;
      // Get item display.
      $vars['display_content'] = $block->get('field_provus_item_display')->value;
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('block_content');
      $storage = \Drupal::entityTypeManager()->getStorage('block_content');
      $id_array = $block->get('field_provus_block_items')->getValue();
      if (!empty($id_array)) {
        foreach ($id_array as $key => $id) {
          $entity = $storage->load($id['target_id']);
          if (!empty($entity)) {
            $block_build['content'] = $view_builder->view($entity, 'default');
            // Add a custom variable to check in block preprocess.
            $block_build['content']['#provus_group_item_display'] = $vars['display_content'];
            provus_blocks_get_block($block_build, $entity);
            $vars['blocks'][] = $block_build;
          }
        }
      }
    }
  }
}
